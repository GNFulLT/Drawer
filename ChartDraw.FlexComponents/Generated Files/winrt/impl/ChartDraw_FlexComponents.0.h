// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210806.1

#pragma once
#ifndef WINRT_ChartDraw_FlexComponents_0_H
#define WINRT_ChartDraw_FlexComponents_0_H
WINRT_EXPORT namespace winrt::ChartDraw_FlexComponents
{
    struct IClass;
    struct Class;
}
namespace winrt::impl
{
    template <> struct category<winrt::ChartDraw_FlexComponents::IClass>{ using type = interface_category; };
    template <> struct category<winrt::ChartDraw_FlexComponents::Class>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::ChartDraw_FlexComponents::Class> = L"ChartDraw_FlexComponents.Class";
    template <> inline constexpr auto& name_v<winrt::ChartDraw_FlexComponents::IClass> = L"ChartDraw_FlexComponents.IClass";
    template <> inline constexpr guid guid_v<winrt::ChartDraw_FlexComponents::IClass>{ 0x6D87EDAE,0x2EDE,0x5DBE,{ 0xBD,0xCE,0xF0,0x6B,0x85,0x1C,0x23,0x62 } }; // 6D87EDAE-2EDE-5DBE-BDCE-F06B851C2362
    template <> struct default_interface<winrt::ChartDraw_FlexComponents::Class>{ using type = winrt::ChartDraw_FlexComponents::IClass; };
    template <> struct abi<winrt::ChartDraw_FlexComponents::IClass>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_ChartDraw_FlexComponents_IClass
    {
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MyProperty() const;
        WINRT_IMPL_AUTO(void) MyProperty(int32_t value) const;
    };
    template <> struct consume<winrt::ChartDraw_FlexComponents::IClass>
    {
        template <typename D> using type = consume_ChartDraw_FlexComponents_IClass<D>;
    };
}
#endif
